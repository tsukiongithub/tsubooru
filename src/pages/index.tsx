import type { NextPage } from "next";

import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";

import { trpc } from "../utils/trpc";
import loadingSpinner from "@/assets/tail-spin.svg";

import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

import isNumber from "@/common/isNumber";
import useWindowDimensions from "@/hooks/useWindowDimensions";

import Search from "@/components/Search";
import Paginator from "@/components/Paginator";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft, faArrowRight, faXmark } from "@fortawesome/free-solid-svg-icons";

const Home: NextPage = () => {
	const router = useRouter();
	const { tags, pid, rating } = router.query;

	const { windowWidth } = useWindowDimensions();

	const [contentRating, setContentRating] = useState("");
	const [search, setSearch] = useState("");
	const [page, setPage] = useState(0);

	const [posts, setPosts] = useState<GelPost[]>([]);
	const [postToShow, setPostToShow] = useState<GelPost>();

	const {
		data: postsData,
		isSuccess: postsDataIsSuccess,
		isLoading,
	} = trpc.gelbooru.getPosts.useQuery(
		{ search: search, pid: page, rating: contentRating },
		{ refetchOnWindowFocus: false }
	);

	useEffect(() => {
		if (isLoading) {
			setPosts([]);
		}
	}, [isLoading]);

	useEffect(() => {
		if (postsDataIsSuccess) {
			if (postsData && postsData.posts) {
				setPosts(postsData.posts.map((post) => post));
			} else {
				setPosts([]);
			}
		}
	}, [postsData, postsDataIsSuccess]);

	useEffect(() => {
		if (rating !== undefined) {
			setContentRating(rating as string);
		} else {
			router.query.rating = "safe";
		}
		router.push(router);
	}, [rating]);

	useEffect(() => {
		if (tags !== undefined) {
			if (tags.length > 0) {
				setSearch(tags as string);
			} else {
				setSearch("");
			}
		} else {
			router.query.tags = "";
		}
		router.push(router);
	}, [tags]);

	useEffect(() => {
		if (pid !== undefined) {
			setPage(isNumber(pid as string));
		} else {
			router.query.pid = "0";
		}
		router.push(router);
	}, [pid]);

	const handleContentRatingChange = (ev: ChangeEvent<HTMLInputElement>) => {
		const newRating = ev.currentTarget.value;
		router.query.rating = newRating;
		router.push(router);
	};

	const handleSlider = (ev: KeyboardEvent) => {
		if (ev.key === "ArrowLeft") {
			ev.preventDefault();
			let prevPost;

			if (postToShow) {
				posts.map((post, i) => {
					if (postToShow.id === post.id) {
						prevPost = posts[i - 1];
					}
				});

				if (prevPost) {
					setPostToShow(prevPost);
				}
			}
		} else if (ev.key === "ArrowRight") {
			ev.preventDefault();
			let nextPost;

			if (postToShow) {
				posts.map((post, i) => {
					if (postToShow.id === post.id) {
						nextPost = posts[i + 1];
					}
				});

				if (nextPost) {
					setPostToShow(nextPost);
				}
			}
		}
	};

	return (
		<>
			<Head>
				<title>image viewer</title>
				<meta
					name="description"
					content="Generated by create-t3-app"
				/>
				<link
					rel="icon"
					href="/favicon.ico"
				/>
			</Head>
			<header className="py-6 px-8">
				<Search />
				<div className="flex select-none items-center gap-4 py-4">
					<label className="flex items-center gap-1">
						<input
							type="radio"
							name="contentRating"
							value={"safe"}
							onChange={handleContentRatingChange}
							defaultChecked={rating === "safe"}
						/>
						safe
					</label>
					<label className="flex items-center gap-1">
						<input
							type="radio"
							name="contentRating"
							value={"nsfw"}
							onChange={handleContentRatingChange}
							defaultChecked={rating === "nsfw"}
						/>
						nsfw
					</label>
				</div>
			</header>
			<main className="container mx-auto">
				<div className="py-8">
					{postsDataIsSuccess && (
						<div className="grid-flow-rows grid w-full gap-x-6 gap-y-12 sm:grid-cols-2 sm:px-0 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8">
							{posts.length >= 1 ? (
								posts.map((post, key) => {
									return (
										<div
											key={key}
											className="relative flex w-full cursor-pointer flex-col"
											onClick={() => {
												setPostToShow(post);
											}}
										>
											<div className="group flex h-auto max-h-full max-w-full items-center justify-center focus:outline-none sm:h-72 md:h-64 xl:h-48">
												{windowWidth! < 640 ? (
													post.file_url.includes("video") ? (
														<Image
															className={`max-h-full max-w-full border-2 border-blue-500 object-contain focus:outline-none group-focus-visible:ring-2 group-focus-visible:ring-black`}
															src={post.sample_url || post.preview_url}
															alt={`${post.id}: ${post.tags}`}
															width={post.sample_width || post.preview_width}
															height={post.sample_height || post.preview_height}
															priority
															loading="eager"
														/>
													) : (
														<Image
															className={`max-h-full max-w-full object-contain focus:outline-none group-focus-visible:ring-2 group-focus-visible:ring-black`}
															src={post.file_url}
															alt={`${post.id}: ${post.tags}`}
															width={post.width}
															height={post.height}
															priority
															loading="eager"
														/>
													)
												) : (
													<Image
														className={`max-h-full max-w-full object-contain focus:outline-none group-focus-visible:ring-2 group-focus-visible:ring-black`}
														src={post.sample_url || post.preview_url}
														alt={`${post.id}: ${post.tags}`}
														width={post.sample_width || post.preview_width}
														height={post.sample_height || post.preview_height}
														priority
														loading="eager"
													/>
												)}
											</div>
										</div>
									);
								})
							) : (
								<p>nothing found :/</p>
							)}
						</div>
					)}
				</div>
				<Paginator />
			</main>
			{postToShow && (
				<div
					className="fixed inset-0 flex flex-col items-center justify-center bg-black/60"
					onLoad={() => {
						document.body.style.overflow = "hidden";
						document.addEventListener("keydown", handleSlider);
					}}
				>
					<button
						className="btn-neutral absolute top-0 right-0 mr-6 mt-6 p-2"
						onClick={() => {
							document.body.style.overflow = "auto";
							document.removeEventListener("keydown", handleSlider);
							setPostToShow(undefined);
						}}
					>
						<FontAwesomeIcon
							className="h-8 w-8"
							icon={faXmark}
						/>
					</button>
					<div className="flex w-full items-center px-12">
						<button
							className="btn-neutral p-3"
							onClick={() => {
								let prevPost;

								posts.map((post, i) => {
									if (postToShow.id === post.id) {
										prevPost = posts[i - 1];
									}
								});

								if (prevPost) {
									setPostToShow(prevPost);
								}
							}}
						>
							<FontAwesomeIcon
								className="h-6 w-6"
								icon={faArrowLeft}
							/>
						</button>
						<div className="flex w-full justify-center">
							<Image
								className="absolute top-1/2 left-1/2 -z-10 -translate-x-1/2 -translate-y-1/2"
								src={loadingSpinner}
								alt={""}
								quality={10}
								width={100}
								height={100}
							/>
							{postToShow.file_url.includes("video") ? (
								<div className="flex min-h-[16rem] flex-col items-center justify-center rounded-xl bg-white p-12">
									<p>videos are currently unsupported.</p>
									<p>please click the source link below to watch.</p>
								</div>
							) : (
								<Image
									className={`max-h-[85vh] max-w-[80vw] object-contain`}
									src={postToShow.file_url}
									alt={`${postToShow.id}: ${postToShow.tags}`}
									quality={100}
									width={postToShow.width}
									height={postToShow.height}
									priority
									loading="eager"
								/>
							)}
						</div>
						<button
							className="btn-neutral p-3"
							onClick={() => {
								let nextPost;

								posts.map((post, i) => {
									if (postToShow.id === post.id) {
										nextPost = posts[i + 1];
									}
								});

								if (nextPost) {
									setPostToShow(nextPost);
								}
							}}
						>
							<FontAwesomeIcon
								className="h-6 w-6"
								icon={faArrowRight}
							/>
						</button>
					</div>
					<div className="absolute bottom-0 left-1/2 mb-4 flex -translate-x-1/2 gap-4">
						<Link
							className="btn-neutral"
							href={postToShow.file_url}
							target={"_blank"}
							prefetch
						>
							view on Gelbooru
						</Link>
						<Link
							className="btn-neutral"
							href={postToShow.source}
							target={"_blank"}
							prefetch
						>
							source
						</Link>
					</div>
				</div>
			)}
		</>
	);
};

export default Home;
